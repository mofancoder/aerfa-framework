package com.zhulong.framework.datasource.proxy;


import java.sql.*;

/**
 * Created by shanb on 2019-3-8.
 */
public class ZhuLongStatementProxy implements Statement {

    private Statement statement;

    private ZhuLongConnectionProxy connectionProxy;

    private String sql;

    public ZhuLongStatementProxy(ZhuLongConnectionProxy connection, Statement statement){
        this(connection,statement,null);
    }

    public ZhuLongStatementProxy(ZhuLongConnectionProxy connection, Statement statement, String sql){
        this.statement = statement;
        this.connectionProxy = connection;
        this.sql = sql;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->
            s.executeQuery(args[0])
        ,sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->s.executeUpdate(args[0]),sql);
    }

    @Override
    public void close() throws SQLException {
        statement.close();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return statement.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        statement.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return statement.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        statement.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        statement.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return statement.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        statement.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        statement.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return statement.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        statement.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        statement.setCursorName(name);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->s.execute(args[0]),sql);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return statement.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return statement.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return statement.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        statement.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return statement.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        statement.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return statement.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return statement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return statement.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        statement.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        statement.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return statement.executeBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return statement.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return statement.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return statement.getGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->s.executeUpdate(args[0],autoGeneratedKeys),sql);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->s.executeUpdate(args[0],columnIndexes),sql);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->s.executeUpdate(args[0]),columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->s.execute(args[0],autoGeneratedKeys),sql);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->s.execute(args[0],columnIndexes),sql);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return ExcuteTemplate.excute(this,(s,args)->s.execute(args[0],columnNames),sql);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return statement.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return statement.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        statement.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return statement.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        statement.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return statement.isCloseOnCompletion();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return statement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return statement.isWrapperFor(iface);
    }

    public String getSql(){
        return this.sql;
    }

    public Statement getTargetStatement(){
        return this.statement;
    }

    public ZhuLongConnectionProxy getConnectionProxy(){
        return connectionProxy;
    }
}